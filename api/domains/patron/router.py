# app/domains/patrons/router.py
# Gemini Assisted Code for Example

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List

from . import schemas, service
from ...db.database import get_db  # Assumed path to your get_db dependency

# Create a new router for this domain
router = APIRouter(
    prefix="/patrons",  # All routes in this file will start with /patrons
    tags=["Patrons"]    # Group them under "Patrons" in the API docs
)

# -----------------
# --- CREATE
# -----------------
@router.post(
    "/",
    response_model=schemas.PatronRead,
    status_code=status.HTTP_201_CREATED
)
def create_patron(
    patron: schemas.PatronCreate, 
    db: Session = Depends(get_db)
):
    """
    Create a new patron.
    
    The PatronID is expected to be auto-generated by the database.
    """
    # Note: You might want to add a service call here to check
    # if a patron with the same name/email already exists first.
    
    new_patron = service.create_patron(db=db, patron=patron)
    return new_patron

# -----------------
# --- READ (Many)
# -----------------
@router.get(
    "/",
    response_model=List[schemas.PatronRead]
)
def read_patrons(
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(get_db)
):
    """
    Retrieve a list of patrons with pagination.
    """
    patrons = service.get_patrons(db, skip=skip, limit=limit)
    return patrons

# -----------------
# --- READ (One)
# -----------------
@router.get(
    "/{patron_id}",
    response_model=schemas.PatronRead
)
def read_patron(
    patron_id: int, 
    db: Session = Depends(get_db)
):
    """
    Retrieve a single patron by their PatronID.
    """
    db_patron = service.get_patron(db, patron_id=patron_id)
    if db_patron is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Patron not found"
        )
    return db_patron

# -----------------
# --- UPDATE
# -----------------
@router.patch(
    "/{patron_id}",
    response_model=schemas.PatronRead
)
def update_patron(
    patron_id: int,
    patron_update: schemas.PatronUpdate,
    db: Session = Depends(get_db)
):
    """
    Update a patron's details.
    
    Only the fields provided in the request body will be updated.
    """
    db_patron = service.update_patron(
        db, 
        patron_id=patron_id, 
        patron_update=patron_update
    )
    if db_patron is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Patron not found"
        )
    return db_patron

# -----------------
# --- DELETE
# -----------------
@router.delete(
    "/{patron_id}",
    response_model=schemas.PatronRead
)
def delete_patron(
    patron_id: int, 
    db: Session = Depends(get_db)
):
    """
    Delete a patron by their PatronID.
    
    Returns the deleted patron's data.
    """
    db_patron = service.delete_patron(db, patron_id=patron_id)
    if db_patron is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Patron not found"
        )
    return db_patron